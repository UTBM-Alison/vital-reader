# Contributing to Vital Reader

Thank you for your interest in contributing to Vital Reader!

## Development Setup

1. **Fork and clone the repository**
   ```bash
   git clone https://github.com/YOUR_USERNAME/vital-reader.git
   cd vital-reader
   ```

2. **Install Rust** (if not already installed)
   ```bash
   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
   ```

3. **Install dependencies**
   - **Ubuntu/Debian**: `sudo apt-get install libudev-dev pkg-config`
   - **Fedora**: `sudo dnf install systemd-devel`
   - **Windows/macOS**: No additional dependencies

4. **Build and test**
   ```bash
   cargo build
   cargo test
   ```

## Code Quality

### Before submitting a PR

1. **Run tests**
   ```bash
   cargo test
   ```

2. **Check formatting**
   ```bash
   cargo fmt --check
   ```

3. **Run clippy**
   ```bash
   cargo clippy -- -D warnings
   ```

4. **Check coverage**
   ```bash
   cargo install cargo-tarpaulin
   cargo tarpaulin --out Html
   ```

### Code Style

- Follow Rust standard formatting (`cargo fmt`)
- Keep functions focused and small (<100 lines)
- Add doc comments for public APIs
- Write descriptive test names
- Aim for >90% code coverage

## Testing

### Unit Tests
Place unit tests in the same file as the code:
```rust
#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_something() {
        // Test code
    }
}
```

### Integration Tests
Place integration tests in `tests/` directory.

## Pull Request Process

1. Create a feature branch: `git checkout -b feature/amazing-feature`
2. Make your changes
3. Add tests for new functionality
4. Ensure all tests pass and coverage is maintained
5. Commit with clear messages: `git commit -m 'Add amazing feature'`
6. Push to your fork: `git push origin feature/amazing-feature`
7. Open a Pull Request

### PR Requirements

- All tests must pass
- Code coverage should not decrease
- Clippy warnings must be resolved
- Code must be formatted with `cargo fmt`
- Include clear description of changes

## Reporting Issues

When reporting bugs, please include:
- Rust version (`rustc --version`)
- Operating system
- Steps to reproduce
- Expected vs actual behavior
- Relevant logs or error messages

## Questions?

Feel free to open an issue for questions or discussions.